import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  FlatList,
  SafeAreaView,
  ScrollView,
} from 'react-native';

const categories = ['Ï†ÑÏ≤¥', 'Í≥µÏßÄÏÇ¨Ìï≠', 'Ïä§ÌÑ∞ÎîîÎ™®Ïßë', 'ÏûêÏú†'];
const initialPosts = [
  {
    id: '1',
    user: 'ÍπÄÏ¢ÖÌîÑ',
    date: '2025.03.19 14:30',
    content: 'Ïò§Îäò Îã®ÏõêÌèâÍ∞Ä Ïä§ÌÑ∞ÎîîÏóêÏÑú Ï¢ãÏùÄ ÏÑ±Í≥ºÍ∞Ä ÏûàÏóàÏäµÎãàÎã§! Ìï®Íªò Í≥µÎ∂ÄÌïòÎãà Îçî Ìö®Ïú®Ï†ÅÏù¥ÎÑ§Ïöî üòä',
    likes: 12,
    comments: [
      { id: 'c1', user: 'ÏùµÎ™Ö', content: 'Ï†ÄÎèÑ Ï∞∏Ïó¨ÌïòÍ≥† Ïã∂Ïñ¥Ïöî!', date: '2025.03.19 15:00' },
      { id: 'c2', user: 'ÌôçÍ∏∏Îèô', content: 'Îã§Ïùå Ïä§ÌÑ∞Îîî Ïñ∏Ï†úÏù∏Í∞ÄÏöî?', date: '2025.03.19 15:30' },
    ],
    saves: 8,
    category: 'Ïä§ÌÑ∞ÎîîÎ™®Ïßë',
  },
  {
    id: '2',
    user: 'Ïù¥Ï¢ÖÌîÑ',
    date: '2025.03.19 13:15',
    content: 'Ïä§ÌÑ∞ÎîîÏõê Î™®ÏßëÌï©ÎãàÎã§! Îß§Ï£º Ïõî/Ïàò/Í∏à Ï†ÄÎÖÅ 8ÏãúÏóê Îã®ÏõêÌèâÍ∞Ä Ï§ÄÎπÑÌïòÏã§ Î∂Ñ~',
    likes: 8,
    comments: [
      { id: 'c3', user: 'Ïä§ÌÑ∞ÎîîÏû•', content: 'Í¥ÄÏã¨ ÏûàÎäî Î∂ÑÏùÄ Ï™ΩÏßÄ Ï£ºÏÑ∏Ïöî!', date: '2025.03.19 14:00' },
    ],
    saves: 6,
    category: 'Ïä§ÌÑ∞ÎîîÎ™®Ïßë',
  },
  {
    id: '3',
    user: 'Ïö¥ÏòÅÏûê',
    date: '2025.03.18 10:00',
    content: 'Ïª§ÎÆ§ÎãàÌã∞ Ïù¥Ïö©Í∑úÏπôÏùÑ Íº≠ ÏùΩÏñ¥Ï£ºÏÑ∏Ïöî!',
    likes: 2,
    comments: [],
    saves: 1,
    category: 'Í≥µÏßÄÏÇ¨Ìï≠',
  },
  {
    id: '4',
    user: 'Î∞ïÏä§ÌÑ∞Îîî',
    date: '2025.03.17 22:12',
    content: 'Ïò§Îäò Í≥µÎ∂Ä ÎÑàÎ¨¥ ÌûòÎì§ÏóàÏñ¥Ïöî. Îã§Îì§ ÌôîÏù¥ÌåÖ!',
    likes: 5,
    comments: [
      { id: 'c4', user: 'ÏùëÏõêÎü¨', content: 'Ïö∞Î¶¨ Î™®Îëê ÌôîÏù¥ÌåÖ!!', date: '2025.03.18 09:30' },
    ],
    saves: 0,
    category: 'ÏûêÏú†',
  },
];

const CURRENT_USER = 'ÏùµÎ™Ö';

const CommunityMainScreen = ({ navigation, route }) => {
  const [selectedCategory, setSelectedCategory] = useState('Ï†ÑÏ≤¥');
  const [search, setSearch] = useState('');
  const [postList, setPostList] = useState(initialPosts);

  useEffect(() => {
    if (route.params?.newPost) {
      const newPostWithComments = { ...route.params.newPost, comments: [] };
      setPostList(prev => [newPostWithComments, ...prev]);
    }
  }, [route.params?.newPost]);

  const handleDelete = (id) => {
    setPostList(prev => prev.filter(post => post.id !== id));
  };

  const filteredPosts = postList.filter(
    (post) =>
      (selectedCategory === 'Ï†ÑÏ≤¥' || post.category === selectedCategory) &&
      post.content.toLowerCase().includes(search.toLowerCase())
  );

  const renderCategory = (cat) => (
    <TouchableOpacity
      key={cat}
      style={[
        styles.categoryBtn,
        selectedCategory === cat && styles.categoryBtnActive,
      ]}
      onPress={() => setSelectedCategory(cat)}
    >
      <Text
        style={[
          styles.categoryText,
          selectedCategory === cat && styles.categoryTextActive,
        ]}
      >
        {cat}
      </Text>
    </TouchableOpacity>
  );

  const renderPost = ({ item }) => (
    <TouchableOpacity 
      style={styles.postCard}
      onPress={() => navigation.navigate('CommunityPost', { 
        post: { ...item, comments: Array.isArray(item.comments) ? item.comments : [] },
        postList,
        setPostList,
      })}
    >
      <View style={styles.postHeader}>
        <Text style={styles.postUser}>{item.user}</Text>
        <Text style={styles.postDate}>{item.date}</Text>
      </View>
      <Text style={styles.postContent}>{item.content}</Text>
      <View style={styles.postFooter}>
        <View style={styles.postFooterItem}>
          <Text style={styles.footerIcon}>üëç</Text>
          <Text style={styles.footerText}>{item.likes}</Text>
        </View>
        <View style={styles.postFooterItem}>
          <Text style={styles.footerIcon}>üí¨</Text>
          <Text style={styles.footerText}>{item.comments.length}</Text>
        </View>
        <View style={styles.postFooterItem}>
          <Text style={styles.footerIcon}>üìå</Text>
          <Text style={styles.footerText}>{item.saves}</Text>
        </View>
        {item.user === CURRENT_USER && (
          <TouchableOpacity
            style={styles.deleteBtn}
            onPress={() => handleDelete(item.id)}
          >
            <Text style={styles.deleteBtnText}>ÏÇ≠Ï†ú</Text>
          </TouchableOpacity>
        )}
      </View>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.safe}>
      <View style={styles.container}>
        <View style={styles.searchBox}>
          <TextInput
            style={styles.searchInput}
            placeholder="Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî (Ïòà: Îã®ÏõêÌèâÍ∞Ä Ïä§ÌÑ∞Îîî)"
            placeholderTextColor="#bdbdbd"
            value={search}
            onChangeText={setSearch}
          />
        </View>
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.categoryScroll}
        >
          {categories.map(renderCategory)}
        </ScrollView>
        <View style={{ flex: 1 }}>
          <Text style={styles.sectionTitle}>ÏµúÍ∑º Í≤åÏãúÍ∏Ä</Text>
          <FlatList
            data={filteredPosts}
            renderItem={renderPost}
            keyExtractor={(item) => item.id}
            contentContainerStyle={{ paddingBottom: 100 }}
            showsVerticalScrollIndicator={false}
            ListEmptyComponent={
              <Text style={{ textAlign: 'center', color: '#bbb', marginTop: 40 }}>
                Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.
              </Text>
            }
          />
        </View>
        <TouchableOpacity
          style={styles.fab}
          onPress={() => navigation.navigate('CommunityWrite')}
        >
          <Text style={styles.fabText}>Ôºã</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safe: { flex: 1, backgroundColor: '#fff' },
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 16,
  },
  searchBox: {
    flexDirection: 'row',
    backgroundColor: '#f5f5f7',
    borderRadius: 8,
    alignItems: 'center',
    paddingHorizontal: 12,
    marginBottom: 12,
    height: 44,
  },
  searchInput: {
    flex: 1,
    fontSize: 15,
    color: '#222',
  },
  categoryScroll: {
    flexDirection: 'row',
    paddingVertical: 0,
    marginBottom: 0,
  },
  categoryBtn: {
    backgroundColor: '#f5f5f7',
    paddingHorizontal: 10,
    paddingVertical: 3,
    borderRadius: 10,
    marginRight: 4,
    alignSelf: 'flex-start',
    justifyContent: 'center',
    alignItems: 'center',
  },
  categoryBtnActive: {
    backgroundColor: '#111',
  },
  categoryText: {
    fontSize: 12,
    color: '#888',
    fontWeight: '500',
  },
  categoryTextActive: {
    color: '#fff',
    fontWeight: 'bold',
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: -200,
    marginBottom: 8,
  },
  postCard: {
    backgroundColor: '#f8f8f8',
    borderRadius: 12,
    padding: 16,
    marginBottom: 14,
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 6,
  },
  postUser: {
    fontWeight: 'bold',
    fontSize: 14,
    color: '#222',
  },
  postDate: {
    fontSize: 12,
    color: '#bbb',
  },
  postContent: {
    fontSize: 15,
    color: '#222',
    marginBottom: 12,
  },
  postFooter: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
  },
  postFooterItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 20,
  },
  footerIcon: {
    fontSize: 16,
    marginRight: 3,
    color: '#888',
  },
  footerText: {
    fontSize: 13,
    color: '#888',
  },
  deleteBtn: {
    backgroundColor: '#ff4444',
    borderRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 4,
    marginLeft: 10,
  },
  deleteBtnText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 13,
  },
  fab: {
    position: 'absolute',
    right: 20,
    bottom: 32,
    backgroundColor: '#111',
    width: 56,
    height: 56,
    borderRadius: 28,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  fabText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 32,
    lineHeight: 36,
  },
});

export default CommunityMainScreen;
